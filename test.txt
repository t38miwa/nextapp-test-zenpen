import React, { useState, useCallback, useRef } from 'react';
 import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';
 
 const containerStyle = {
   width: '100%',
   height: '1000px'
 };
 
 // 複数の場所の緯度経度
 const locations = [
   {
     id: 'jinguMae', // 一意のID
     position: {
       lat: 35.667487,
       lng: 139.706844
     },
     placeId: 'ChIJSSxEVKGMGGARGOjerrvUdf8' // 東京の場所
   },
   {
     id: 'osakaEsaka', // 一意のID
     position: {
       lat: 34.756912,
       lng: 135.497376
     },
     placeId: 'ChIJr7f6nvDlAGARiKNjkeMMkQ0' // 大阪の場所、実際のプレースIDを設定する必要があります
   },
   {
    id: 'nagasaki', // 一意のID
    position: {
      lat: 32.74393039262733,
      lng: 129.87998083068504
    },
    placeId: 'ChIJCQ7NNA5TFTURjxQ4IKYMF9M' // 大阪の場所、実際のプレースIDを設定する必要があります
  }
 ];
 
 const libraries = ["places"];
 
 const MapComponent = () => {
   const [selectedPlace, setSelectedPlace] = useState(null);
   const mapRef = useRef(null);
   const onLoad = useCallback((map) => (mapRef.current = map), []);
 
   // 関数の定義を更新し、placeオブジェクトを受け取るようにしました。
   const onMarkerClick = useCallback((place) => {
     if (!mapRef.current) return;
     
     const service = new window.google.maps.places.PlacesService(mapRef.current);
     service.getDetails({
       placeId: place.placeId,
       fields: ['name', 'formatted_address', 'formatted_phone_number', 'photo', 'website']
     }, (result, status) => {
       if (status === window.google.maps.places.PlacesServiceStatus.OK) {
         setSelectedPlace({
           position: place.position,
           name: result.name,
           info: result.formatted_address,
           phone: result.formatted_phone_number,
           website: result.website,
           photoUrl: result.photos ? result.photos[0].getUrl() : null
         });
       }
     });
   }, []);
 
   return (
     <LoadScript
       googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
       libraries={libraries}
     >
       <GoogleMap
         mapContainerStyle={containerStyle}
         center={{ lat: 35.162907, lng: 136.907413 }} // 中心位置を日本全体に見えるように調整
         zoom={5}
         onLoad={onLoad}
       >
         {locations.map(location => (
           <Marker
             key={location.id}
             position={location.position}
             onClick={() => onMarkerClick(location)} // ここで正しくlocationオブジェクトを渡します。
           />
         ))}
         {selectedPlace && (
           <InfoWindow position={selectedPlace.position} onCloseClick={() => setSelectedPlace(null)}>
             <div>
               <h2>{selectedPlace.name}</h2>
               <p>{selectedPlace.info}</p>
               {selectedPlace.phone && <p>Phone: {selectedPlace.phone}</p>}
               {selectedPlace.website && <p><a href={selectedPlace.website} target="_blank" rel="noopener noreferrer">Website</a></p>}
               {selectedPlace.photoUrl && <img src={selectedPlace.photoUrl} alt="Place" style={{ width: '100px' }} />}
             </div>
           </InfoWindow>
         )}
       </GoogleMap>
     </LoadScript>
   );
 }
 
 export default MapComponent;
 